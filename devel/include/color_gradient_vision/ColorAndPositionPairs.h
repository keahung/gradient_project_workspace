// Generated by gencpp from file color_gradient_vision/ColorAndPositionPairs.msg
// DO NOT EDIT!


#ifndef COLOR_GRADIENT_VISION_MESSAGE_COLORANDPOSITIONPAIRS_H
#define COLOR_GRADIENT_VISION_MESSAGE_COLORANDPOSITIONPAIRS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <color_gradient_vision/ColorAndPosition.h>

namespace color_gradient_vision
{
template <class ContainerAllocator>
struct ColorAndPositionPairs_
{
  typedef ColorAndPositionPairs_<ContainerAllocator> Type;

  ColorAndPositionPairs_()
    : pairs()  {
    }
  ColorAndPositionPairs_(const ContainerAllocator& _alloc)
    : pairs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::color_gradient_vision::ColorAndPosition_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::color_gradient_vision::ColorAndPosition_<ContainerAllocator> >::other >  _pairs_type;
  _pairs_type pairs;





  typedef boost::shared_ptr< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> const> ConstPtr;

}; // struct ColorAndPositionPairs_

typedef ::color_gradient_vision::ColorAndPositionPairs_<std::allocator<void> > ColorAndPositionPairs;

typedef boost::shared_ptr< ::color_gradient_vision::ColorAndPositionPairs > ColorAndPositionPairsPtr;
typedef boost::shared_ptr< ::color_gradient_vision::ColorAndPositionPairs const> ColorAndPositionPairsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace color_gradient_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'color_gradient_vision': ['/home/cc/ee106a/fa19/class/ee106a-acl/project_workspace/src/color_gradient_vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc8e80026229df02835845177e306a2f";
  }

  static const char* value(const ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc8e80026229df02ULL;
  static const uint64_t static_value2 = 0x835845177e306a2fULL;
};

template<class ContainerAllocator>
struct DataType< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "color_gradient_vision/ColorAndPositionPairs";
  }

  static const char* value(const ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ColorAndPosition[] pairs\n\
\n\
================================================================================\n\
MSG: color_gradient_vision/ColorAndPosition\n\
float32 x\n\
float32 y\n\
uint8 R\n\
uint8 G\n\
uint8 B\n\
";
  }

  static const char* value(const ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pairs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ColorAndPositionPairs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::color_gradient_vision::ColorAndPositionPairs_<ContainerAllocator>& v)
  {
    s << indent << "pairs[]" << std::endl;
    for (size_t i = 0; i < v.pairs.size(); ++i)
    {
      s << indent << "  pairs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::color_gradient_vision::ColorAndPosition_<ContainerAllocator> >::stream(s, indent + "    ", v.pairs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLOR_GRADIENT_VISION_MESSAGE_COLORANDPOSITIONPAIRS_H
